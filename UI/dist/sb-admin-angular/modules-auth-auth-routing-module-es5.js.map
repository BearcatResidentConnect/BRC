{"version":3,"sources":["webpack:///src/modules/auth/components/index.ts","webpack:///src/modules/auth/containers/login/login.component.ts","webpack:///src/modules/auth/containers/register/register.component.html","webpack:///src/modules/auth/containers/login/login.component.scss","webpack:///src/modules/auth/auth-routing.module.ts","webpack:///src/modules/auth/containers/register/register.component.scss","webpack:///src/modules/auth/auth.module.ts","webpack:///src/modules/auth/containers/register/register.component.ts","webpack:///src/modules/auth/containers/index.ts","webpack:///src/modules/auth/containers/login/login.component.html","webpack:///src/modules/auth/containers/forgot-password/forgot-password.component.html","webpack:///src/modules/auth/containers/forgot-password/forgot-password.component.scss","webpack:///src/modules/auth/containers/forgot-password/forgot-password.component.ts"],"names":["components","LoginComponent","authService","tokenStorage","myRoute","form","username","password","isLoggedIn","isLoginFailed","errorMessage","login","subscribe","next","data","access_token","setToken","refresh_token","saveToken","accessToken","saveUser","console","log","localStorage","setItem","getdetails","navigateByUrl","getToken","error","err","detail","getUserDetails","data1","email","first_name","last_name","user_name","sid","selector","changeDetection","Default","template","ROUTES","path","canActivate","pathMatch","redirectTo","component","title","AuthRoutingModule","imports","forChild","exports","AuthModule","providers","declarations","RegisterComponent","firstname","lastname","isSuccessful","isSignUpFailed","register","message","controls","value","setErrors","compareWith","OnPush","containers","ForgotPasswordComponent"],"mappings":"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","file":"modules-auth-auth-routing-module-es5.js","sourcesContent":["export const components = [];\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../../../auth/services/auth.service';\r\nimport { TokenStorageService } from '../../../auth/services/token-storage.service';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Component({\r\n    selector: 'sb-login',\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    form: any = {\r\n        username: null,\r\n        password: null,\r\n    };\r\n    isLoggedIn = false;\r\n    isLoginFailed = false;\r\n    errorMessage = '';\r\n    access_token:any;\r\n  \r\n    constructor(private authService: AuthService, private tokenStorage: TokenStorageService,private myRoute: Router) { }\r\n  \r\n    ngOnInit(): void {\r\n      \r\n    }\r\n\r\n    \r\n  \r\n    onSubmit(): void {\r\n      const { username, password } = this.form;\r\n  \r\n      this.authService.login(username, password).subscribe({\r\n        next: data => {\r\n          data && data.access_token &&  this.tokenStorage.setToken('access_token',data.access_token);\r\n          data && data.refresh_token && this.tokenStorage.setToken('refresh_token',data.refresh_token);\r\n          \r\n          this.tokenStorage.saveToken(data.accessToken);\r\n          this.tokenStorage.saveUser(data);\r\n  \r\n          this.isLoginFailed = false;\r\n          this.isLoggedIn = true;\r\n          console.log(data.access_token , \"access token1\")\r\n          console.log(data.refresh_token)\r\n          localStorage.setItem('access_token',this.access_token);\r\n          console.log(data.access_token , \"access token1\")\r\n          this.getdetails(username);\r\n          this.myRoute.navigateByUrl('dashboard');\r\n\r\n          if (this.tokenStorage.getToken('access_token')) {\r\n        this.isLoggedIn = true;\r\n        console.log('sdf');  \r\n        console.log(this.tokenStorage.getToken('access_token'));\r\n      }\r\n        },\r\n        \r\n        error: err => {\r\n          this.errorMessage = err.error.detail;\r\n          this.isLoginFailed = true;\r\n        }\r\n      });\r\n    }\r\n    getdetails(username:any){\r\n      this.authService.getUserDetails(username).subscribe({\r\n            next: data1 => { console.log(data1, \"dgdfg\");\r\n            localStorage.setItem('email',data1.email); \r\n            localStorage.setItem('first_name',data1.first_name); \r\n            localStorage.setItem('last_name',data1.last_name); \r\n            localStorage.setItem('user_name',data1.user_name); \r\n            localStorage.setItem('sid',data1.sid); \r\n            localStorage.setItem('access_token',data1.access_token); \r\n          }\r\n          });\r\n    }\r\n  }\r\n","export default \"<sb-layout-auth>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-md-6 bg\\\">\\n                <img alt=\\\"My image\\\" src=\\\"../../../../assets/img/banner.png\\\">\\n              </div>\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"card shadow-lg border-0 rounded-lg mt-5\\\">\\n                    <div class=\\\"card-header\\\"><h3 class=\\\"text-center font-weight-light my-4\\\">Create Account</h3></div>\\n                    <div class=\\\"card-body\\\">\\n                        <form *ngIf=\\\"!isSuccessful\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\">\\n                            <div class=\\\"row\\\">\\n                              <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                  <label for=\\\"username\\\">Username</label>\\n                                  <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" [(ngModel)]=\\\"form.username\\\" required minlength=\\\"3\\\"\\n                                    maxlength=\\\"20\\\" #username=\\\"ngModel\\\" placeholder=\\\"sam@gmail.com\\\"/>\\n                                  <div class=\\\"alert-danger\\\" *ngIf=\\\"username.errors && f.submitted\\\">\\n                                    <div *ngIf=\\\"username.errors['required']\\\">Username is required*</div>\\n                                    <div *ngIf=\\\"username.errors['minlength']\\\">\\n                                      Username must be at least 3 characters\\n                                    </div>\\n                                    <div *ngIf=\\\"username.errors['maxlength']\\\">\\n                                      Username must be at most 20 characters\\n                                    </div>\\n                                  </div>\\n                                </div>\\n                              </div>\\n                              <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                  <label for=\\\"sid\\\">SID(Dont have one please leave it)</label>\\n                                  <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"sid\\\" [(ngModel)]=\\\"form.sid\\\"  minlength=\\\"6\\\"\\n                                     #sid=\\\"ngModel\\\" pattern=\\\"^[a-zA-Z][0-9]{6}$\\\" placeholder=\\\"If u dont have one please leave it empty\\\" data-toggle=\\\"tooltip\\\" title=\\\"If u dont have SID please leave it empty\\\"/>\\n                                  <div class=\\\"alert-danger\\\" *ngIf=\\\"sid.errors && f.submitted\\\">\\n                                    <div *ngIf=\\\"sid.errors['required']\\\">SID is required</div>\\n                                    <div *ngIf=\\\"sid.errors['minlength']\\\">\\n                                      sid must be at least 6 characters \\n                                    </div>\\n                                    <div *ngIf=\\\"sid.errors?.pattern\\\">\\n                                      sid is invalid format is (S12345)\\n                                    </div>\\n                                  </div>\\n                                </div>\\n                              </div>\\n                            </div>\\n                    \\n                            <div class=\\\"row\\\">\\n                              <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                  <label for=\\\"firstname\\\">FirstName*</label>\\n                                  <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstname\\\" [(ngModel)]=\\\"form.firstname\\\" required\\n                                    minlength=\\\"3\\\" maxlength=\\\"20\\\" #firstname=\\\"ngModel\\\" placeholder=\\\"Firstname\\\"/>\\n                                  <div class=\\\"alert-danger\\\" *ngIf=\\\"firstname.errors && f.submitted\\\">\\n                                    <div *ngIf=\\\"firstname.errors['required']\\\">Firstname is required</div>\\n                                    <div *ngIf=\\\"firstname.errors['minlength']\\\">\\n                                      Firstname must be at least 3 characters\\n                                    </div>\\n                                    <div *ngIf=\\\"firstname.errors['maxlength']\\\">\\n                                      Firstname must be at most 20 characters\\n                                    </div>\\n                                  </div>\\n                                </div>\\n                              </div>\\n                              <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                  <label for=\\\"lastname\\\">LastName*</label>\\n                                  <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastname\\\" [(ngModel)]=\\\"form.lastname\\\" required minlength=\\\"3\\\"\\n                                    maxlength=\\\"20\\\" #lastname=\\\"ngModel\\\" placeholder=\\\"Lastname\\\"/>\\n                                  <div class=\\\"alert-danger\\\" *ngIf=\\\"lastname.errors && f.submitted\\\">\\n                                    <div *ngIf=\\\"lastname.errors['required']\\\">Lastname is required</div>\\n                                    <div *ngIf=\\\"lastname.errors['minlength']\\\">\\n                                      Lastname must be at least 3 characters\\n                                    </div>\\n                                    <div *ngIf=\\\"lastname.errors['maxlength']\\\">\\n                                      Lastname must be at most 20 characters\\n                                    </div>\\n                                  </div>\\n                                </div>\\n                              </div>\\n                            </div>\\n                            <div class=\\\"row\\\">\\n                              <div class=\\\"col-md-12\\\">\\n                                <div class=\\\"form-group\\\">\\n                                  <label for=\\\"email\\\">Email*</label>\\n                                  <input type=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" [(ngModel)]=\\\"form.email\\\" required email\\n                                    #email=\\\"ngModel\\\" placeholder=\\\"someone@gmail.com\\\"/>\\n                                  <div class=\\\"alert-danger\\\" *ngIf=\\\"email.errors && f.submitted\\\">\\n                                    <div *ngIf=\\\"email.errors['required']\\\">Email is required</div>\\n                                    <div *ngIf=\\\"email.errors['email']\\\">\\n                                      Email must be a valid email address\\n                                    </div>\\n                                  </div>\\n                                </div>\\n                              </div>\\n                            </div>\\n                            \\n                            <div class=\\\"row\\\">\\n                              <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                  <label for=\\\"password\\\">Password*</label>\\n                                  <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"form.password\\\" required minlength=\\\"6\\\" #password=\\\"ngModel\\\" placeholder=\\\"xxx\\\"/>\\n                                  <div class=\\\"alert-danger\\\" *ngIf=\\\"password.errors && f.submitted\\\">\\n                                    <div *ngIf=\\\"password.errors['required']\\\">Password is required</div>\\n                                    <div *ngIf=\\\"password.errors['minlength']\\\">Password must be at least 6 characters</div>\\n                                  </div>\\n                                </div>\\n                              </div>\\n                              <div class=\\\"col-md-6\\\">\\n                                <div class=\\\"form-group\\\">\\n                                  <label for=\\\"cpassword\\\">Confirm Password*</label>\\n                                  <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"cpassword\\\" [(ngModel)]=\\\"form.cpassword\\\" required minlength=\\\"6\\\" #cpassword=\\\"ngModel\\\" compareWith=\\\"password\\\" placeholder=\\\"xxx\\\"/>\\n                                  <div class=\\\"alert-danger\\\" *ngIf=\\\"cpassword.errors && f.submitted\\\">\\n                                    <div *ngIf=\\\"cpassword.errors['required']\\\">Confirm password is required</div>\\n                                    <div *ngIf=\\\"cpassword.errors['minlength']\\\">Confirm password must be at least 6 characters</div>\\n                                    <div *ngIf=\\\"cpassword.errors['compareWith']\\\">Passwords do not match</div>\\n                                  </div>\\n                                </div>\\n                              </div>\\n                            </div>\\n                             \\n                            <div class=\\\"form-group\\\">\\n                              <button class=\\\"btn btn-block btn-outline-primary \\\" >Sign Up</button>\\n                            </div>\\n                    \\n                            <div class=\\\"alert alert-warning\\\" *ngIf=\\\"f.submitted && isSignUpFailed\\\">\\n                              Signup failed!<br />{{ errorMessage }}\\n                            </div>\\n                          </form>\\n                          <div class=\\\"alert alert-success\\\" *ngIf=\\\"isSuccessful\\\">\\n                            Your registration is successful!\\n                          </div>\\n                    </div>\\n                    <div class=\\\"card-footer text-center\\\">\\n                        <div class=\\\"small\\\"><a routerLink=\\\"/auth/login\\\">Have an account ? Go to login</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuc2NzcyJ9 */\";","/* tslint:disable: ordered-imports*/\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SBRouteData } from '@modules/navigation/models';\n\n/* Module */\nimport { AuthModule } from './auth.module';\n\n/* Containers */\nimport * as authContainers from './containers';\n\n/* Guards */\nimport * as authGuards from './guards';\nimport { AuthGuard } from './guards';\n\n/* Routes */\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        canActivate:[AuthGuard],\n        pathMatch: 'full',\n        redirectTo: 'login',\n    },\n    {\n        path: 'login',\n        canActivate: [],\n        component: authContainers.LoginComponent,\n        data: {\n            title: 'Pages Login - Bearcat Resident Connect',\n        } as SBRouteData,\n    },\n    {\n        path: 'register',\n        canActivate: [],\n        component: authContainers.RegisterComponent,\n        data: {\n            title: 'Pages Register - Bearcat Resident Connect',\n        } as SBRouteData,\n    },\n    {\n        path: 'forgot-password',\n        canActivate: [AuthGuard],\n        component: authContainers.ForgotPasswordComponent,\n        data: {\n            title: 'Pages Forgot Password - Bearcat Resident Connect',\n        } as SBRouteData,\n    },\n];\n\n@NgModule({\n    imports: [AuthModule, RouterModule.forChild(ROUTES)],\n    exports: [RouterModule],\n})\nexport class AuthRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZWdpc3Rlci5jb21wb25lbnQuc2NzcyJ9 */\";","/* tslint:disable: ordered-imports*/\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\n/* Modules */\nimport { AppCommonModule } from '@common/app-common.module';\nimport { NavigationModule } from '@modules/navigation/navigation.module';\n\n/* Components */\nimport * as authComponents from './components';\n\n/* Containers */\nimport * as authContainers from './containers';\n\n/* Guards */\nimport * as authGuards from './guards';\n\n/* Services */\nimport * as authServices from './services';\nimport { AuthGuard } from './guards';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        ReactiveFormsModule,\n        FormsModule,\n        AppCommonModule,\n        NavigationModule,\n    ],\n    providers: [...authServices.services, ...authGuards.guards, AuthGuard],\n    declarations: [...authContainers.containers, ...authComponents.components],\n    exports: [...authContainers.containers, ...authComponents.components],\n})\nexport class AuthModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../../../auth/services/auth.service';\n@Component({\n    selector: 'sb-register',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './register.component.html',\n    styleUrls: ['register.component.scss'],\n})\nexport class RegisterComponent implements OnInit {\n    form: any = {\n        username: null,\n        sid: null,\n        firstname: null,\n        lastname: null,\n        email: null,\n        password: null,\n    };\n    isSuccessful = false;\n    isSignUpFailed = false;\n    errorMessage = '';\n    password: string | any;\n    cpassword: string | any;\n    \n    constructor(private authService: AuthService) {}\n\n    ngOnInit(): void {}\n\n    onSubmit(): void {\n        const { username, sid, firstname, lastname, email, password } = this.form;\n\n        this.authService.register(username, sid, firstname, lastname, email, password).subscribe({\n            next: (data: any) => {\n                console.log(data);\n                this.isSuccessful = true;\n                this.isSignUpFailed = false;\n            },\n            error: (err: { error: { message: string } }) => {\n                this.errorMessage = err.error.message;\n                this.isSignUpFailed = true;\n            },\n        });\n    }\n\n    comparePasswords(form: NgForm) {\n        if (form.controls['password'].value !== form.controls['cpassword'].value) {\n          form.controls['cpassword'].setErrors({ compareWith: true });\n        } else {\n          form.controls['cpassword'].setErrors(null);\n        }\n      }\n}\n","import { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\n\nexport const containers = [LoginComponent, RegisterComponent, ForgotPasswordComponent];\n\nexport * from './login/login.component';\nexport * from './register/register.component';\nexport * from './forgot-password/forgot-password.component';\n","export default \"<sb-layout-auth\\n    ><div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-md-6 bg\\\">\\n                <img alt=\\\"My image\\\" src=\\\"../../../../assets/img/banner.png\\\">\\n              </div>\\n            <div class=\\\"col-lg-6\\\">\\n                <div class=\\\"card shadow-lg border-0 rounded-lg mt-5\\\">\\n                    <div class=\\\"card-header\\\"><h3 class=\\\"text-center font-weight-light my-4\\\">Login</h3></div>\\n                    <div class=\\\"card-body\\\">\\n                        <form *ngIf=\\\"!isLoggedIn\\\" name=\\\"form\\\" (ngSubmit)=\\\"f.form.valid && onSubmit()\\\" #f=\\\"ngForm\\\" novalidate>\\n                            <div class=\\\"form-group\\\">\\n                              <label for=\\\"username\\\">Username</label>\\n                              <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" [(ngModel)]=\\\"form.username\\\" required\\n                                #username=\\\"ngModel\\\" />\\n                              <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"username.errors && f.submitted\\\">\\n                                Username is required!\\n                              </div>\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                              <label for=\\\"password\\\">Password</label>\\n                              <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" [(ngModel)]=\\\"form.password\\\" required\\n                                minlength=\\\"6\\\" #password=\\\"ngModel\\\" />\\n                              <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"password.errors && f.submitted\\\">\\n                                <div *ngIf=\\\"password.errors['required']\\\">Password is required</div>\\n                                <div *ngIf=\\\"password.errors['minlength']\\\">\\n                                  Password must be at least 6 characters\\n                                </div>\\n                              </div>\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                              <button class=\\\"btn btn-block btn-outline-primary\\\" >\\n                                Login\\n                              </button>\\n                              <!-- <button class=\\\"btn btn-block btn-outline-primary\\\" [disabled]=\\\"f.invalid\\\">\\n                                Login\\n                              </button> -->\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                              <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" *ngIf=\\\"errorMessage\\\">\\n                                Login failed: {{ errorMessage }}\\n                              </div>\\n                            </div>\\n                          </form>\\n                    </div>\\n                    <div class=\\\"card-footer text-center\\\">\\n                        <div class=\\\"small\\\"><a routerLink=\\\"/auth/register\\\">Need an account? Sign up!</a></div>\\n                    </div>\\n                    <!-- <div class=\\\"card-footer text-center\\\">\\n                      <div class=\\\"small\\\"><a routerLink=\\\"http://3.224.253.213:5000/api/user/reset_password\\\">Change password!</a></div>\\n                  </div> -->\\n                </div>\\n            </div>\\n        </div>\\n    </div></sb-layout-auth>\\n\";","export default \"<sb-layout-auth>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"row justify-content-center\\\">\\n            <div class=\\\"col-lg-5\\\">\\n                <div class=\\\"card shadow-lg border-0 rounded-lg mt-5\\\">\\n                    <div class=\\\"card-header\\\"><h3 class=\\\"text-center font-weight-light my-4\\\">Password Recovery</h3></div>\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"small mb-3 text-muted\\\">Enter your email address and we will send you a link to reset your password.</div>\\n                        <form>\\n                            <div class=\\\"form-group\\\"><label class=\\\"small mb-1\\\" for=\\\"inputEmailAddress\\\">Email</label><input class=\\\"form-control py-4\\\" id=\\\"inputEmailAddress\\\" type=\\\"email\\\" aria-describedby=\\\"emailHelp\\\" placeholder=\\\"Enter email address\\\" /></div>\\n                            <div class=\\\"form-group d-flex align-items-center justify-content-between mt-4 mb-0\\\"><a class=\\\"small\\\" routerLink=\\\"/auth/login\\\">Return to login</a><a class=\\\"btn btn-primary\\\" routerLink=\\\"/auth/login\\\">Reset Password</a></div>\\n                        </form>\\n                    </div>\\n                    <div class=\\\"card-footer text-center\\\">\\n                        <div class=\\\"small\\\"><a routerLink=\\\"/auth/register\\\">Need an account? Sign up!</a></div>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</sb-layout-auth>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmb3Jnb3QtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MifQ== */\";","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'sb-forgot-password',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './forgot-password.component.html',\n    styleUrls: ['forgot-password.component.scss'],\n})\nexport class ForgotPasswordComponent implements OnInit {\n    constructor() {}\n    ngOnInit() {}\n}\n"]}
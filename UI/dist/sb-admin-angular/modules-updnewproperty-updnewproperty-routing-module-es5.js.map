{"version":3,"sources":["webpack:///src/modules/updnewproperty/services/index.ts","webpack:///src/modules/updnewproperty/services/updnewproperty.service.ts","webpack:///src/modules/updnewproperty/containers/updnewproperty/updnewproperty.component.ts","webpack:///src/modules/updnewproperty/updnewproperty.module.ts","webpack:///src/modules/updnewproperty/updnewproperty-routing.module.ts","webpack:///src/modules/updnewproperty/containers/updnewproperty/updnewproperty.component.scss","webpack:///src/modules/updnewproperty/containers/updnewproperty/updnewproperty.component.html","webpack:///src/modules/updnewproperty/containers/index.ts"],"names":["services","updnewpropertyService","http","formdetails","put","basePath","rental_id","get","UpdnewpropertyComponent","datePipe","route","router","form","user_name","posting_id","localStorage","getItem","event","key","preventDefault","snapshot","params","id","getUserrental","subscribe","data","rentallisting","console","log","today","Date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","name","accomedation_type","available_date","numDays","accomedated_date","num_people","numpeopleneed","numRooms","numBaths","appRent","petFriendly","parking_available","address","city","state","country","zipcode","description","nf","valid","updatePropertydetails","next","postingproperty","isFormDirty","navigate","alert","Object","values","controls","some","control","dirty","selector","changeDetection","OnPush","template","UpdnewpropertyModule","imports","providers","declarations","exports","ROUTES","path","canActivate","component","title","breadcrumbs","text","link","active","UpdnewpropertyRoutingModule","forChild","containers"],"mappings":"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","file":"modules-updnewproperty-updnewproperty-routing-module-es5.js","sourcesContent":["import { updnewpropertyService } from './updnewproperty.service';\n\nexport const services = [updnewpropertyService];\n\nexport * from './updnewproperty.service';\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport {environment} from 'environments/environment';\n\n// const API_URL = 'http://18.207.93.25:5000/api';\n\n// const API_URL  = 'http://192.168.1.23:5000/api';\n\n\n@Injectable()\nexport class updnewpropertyService {\n    constructor(private http: HttpClient) { }\n  \n    updatePropertydetails(formdetails:any): Observable<any> {\n    //   return this.http.post(API_URL + '/user-posting', { responseType: 'text' });\n      return this.http.put(environment.basePath + '/user-posting', formdetails);\n\n    }\n\n    getUserrental(rental_id:any): Observable<any> {\n      return this.http.get(environment.basePath + '/user-posting' + '/postings/' + rental_id ) \n      \n    }\n\n\n}\n","import { DatePipe } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { updnewpropertyService } from '../../services/updnewproperty.service';\n\nimport { ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n    selector: 'sb-updnewproperty',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './updnewproperty.component.html',\n    styleUrls: ['updnewproperty.component.scss'],\n})\nexport class UpdnewpropertyComponent implements OnInit {\n\n  @ViewChild('nf', { static: false }) nf!: NgForm;\n\n  restrictNegativeValues(event: KeyboardEvent) {\n    if (event.key === '-' || event.key === '+') {\n      event.preventDefault();\n    }\n  }\n\n  rentallisting: any;\n\n    form = {\n        \"user_name\": \"string\",\n        \"accomedation_type\": \"string\",\n        \"name\": \"string\",\n        \"available_date\": \"any\",\n        \"num_days\": \"any\",\n        \"accomedated_date\": \"any\",\n        \"num_people\": \"any\",\n        \"num_people_living\":\"any\",\n        \"num_bedrooms\": \"any\",\n        \"num_bathrooms\": \"any\",\n        \"approx_rent\": \"any\",\n        \"is_pet_friendly\": \"any\",\n        \"parking_available\": \"any\",\n        \"address\": \"string\",\n          \"address1\": \"string\",\n          \"address2\": \"string\",\n          \"address3\": \"string\",\n          \"city\": \"string\",\n          \"state\": \"string\",\n          \"country\": \"string\",\n          \"zipcode\": \"any\",\n          \"description\": \"any\"\n      };\n    localStorage: any;\n    user_name:any = \"\";\n    posting_id:any = localStorage.getItem(\"posting_id\")\n    accomedation_type: any;\n    available_date:any;\n    accomedated_date:any;\n    propDesc:any;\n    num_people:any;\n    numpeopleneed:any;\n    numRooms:any;\n    numDays:any;\n    numBaths:any;\n    accomStart: any;\n    appRent:any;\n    parking_available:any;\n    petFriendly:any;\n    address:any;\n    city:any;\n    state:any;\n    country:any;\n    zipcode:any;\n    name: any;\n    description: any;\n    constructor( private updnewpropertyService : updnewpropertyService, private datePipe: DatePipe, private route: ActivatedRoute,private router: Router) {}\n    ngOnInit() {\n      this.posting_id = this.route.snapshot.params.id;\n      this.updnewpropertyService.getUserrental(this.posting_id).subscribe((data: any) => {\n        this.rentallisting = data;\n        console.log(this.rentallisting, \"user listing detils\");\n    });\n    }\n\n    getCurrentDate(): string {\n      const today = new Date();\n      const year = today.getFullYear();\n      const month = (today.getMonth() + 1).toString().padStart(2, '0');\n      const day = today.getDate().toString().padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n    \n    onSubmit(): void {\n        this.form = {\n            \"user_name\": this.user_name,\n            \"name\": this.name,\n            \"accomedation_type\": this.accomedation_type,\n            \"available_date\": this.available_date,\n            \"num_days\": this.numDays,\n            \"accomedated_date\": this.accomedated_date,\n            \"num_people\": this.num_people,\n            \"num_people_living\": this.numpeopleneed,\n            \"num_bedrooms\": this.numRooms,\n            \"num_bathrooms\": this.numBaths,\n            \"approx_rent\": this.appRent,\n            \"is_pet_friendly\": this.petFriendly,\n            \"parking_available\": this.parking_available,\n             \"address\": this.address,\n              \"address1\": \"\",\n              \"address2\": \"\",\n              \"address3\": \"\",\n              \"city\": this.city,\n              \"state\": this.state,\n              \"country\": this.country,\n              \"zipcode\": this.zipcode,\n            \"description\":this.description,\n          };\n\n          if (this.nf.form.valid) {\n            this.updnewpropertyService.updatePropertydetails(this.rentallisting).subscribe({ \n              next: postingproperty => { console.log(postingproperty, \"updatingproperty\");}\n            });\n            if (this.isFormDirty()) {\n                this.router.navigate([`myuserlistings`]);\n                alert(\"Property details updated successfully\");\n            }\n            else {\n              alert(\"No changes made to property details\");\n          }\n        }\n        \n    }\n\n    isFormDirty(): boolean {\n      return Object.values(this.nf.form.controls).some(control => control.dirty);\n    }\n}\n\n\n\nexport interface User{\n  accomedated_date: any,\n  accomedation_type: any,\n  address1: string,\n  approx_rent: any,\n  available_date: any,\n  city: string,\n  country: string,\n  description: string,\n  email: string,\n  is_pet_friendly: boolean,\n  name: string,\n  num_bathrooms: string,\n  num_bedrooms: string,\n  num_days: string,\n  num_people: string,\n  num_people_living: string,\n  parking_available: boolean,\n  posting_id: any,\n  state: string,\n  user_name: string,\n  zipcode: any,\n\n}\n","/* tslint:disable: ordered-imports*/\nimport { NgModule } from '@angular/core';\nimport { CommonModule, DecimalPipe } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\n/* Modules */\nimport { AppCommonModule } from '@common/app-common.module';\nimport { NavigationModule } from '@modules/navigation/navigation.module';\n\n/* Containers */\nimport * as updnewpropertyContainers from './containers';\n\n/* Services */\nimport * as updnewpropertyServices from './services';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule,\n        ReactiveFormsModule,\n        FormsModule,\n        AppCommonModule,\n        NavigationModule,\n    ],\n    providers: [DecimalPipe, ...updnewpropertyServices.services],\n    declarations: [...updnewpropertyContainers.containers],\n    exports: [...updnewpropertyContainers.containers],\n})\nexport class UpdnewpropertyModule {}\n","/* tslint:disable: ordered-imports*/\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n/* Module */\nimport { UpdnewpropertyModule } from './updnewproperty.module';\n\n/* Containers */\nimport * as updnewpropertyContainers from './containers';\n\nimport { SBRouteData } from '@modules/navigation/models';\n\n/* Routes */\nexport const ROUTES: Routes = [\n    {\n        path: '',\n        canActivate: [],\n        component: updnewpropertyContainers.UpdnewpropertyComponent,\n        data: {\n            title: 'New Property',\n            breadcrumbs: [\n                {\n                    text: 'Dashboard',\n                    link: '/dashboard',\n                },\n                {\n                    text: 'Update property',\n                    active: true,\n                },\n            ],\n        } as SBRouteData,\n    },\n];\n\n@NgModule({\n    imports: [UpdnewpropertyModule, RouterModule.forChild(ROUTES)],\n    exports: [RouterModule],\n})\nexport class UpdnewpropertyRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1cGRuZXdwcm9wZXJ0eS5jb21wb25lbnQuc2NzcyJ9 */\";","export default \"<sb-layout-dashboard>\\n    <sb-dashboard-head title=\\\"Update Property\\\" [hideBreadcrumbs]=\\\"false\\\"></sb-dashboard-head>\\n    <sb-card>\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"card-body px-6 pt-6 pb-5\\\">\\n                <!-- <h3 class=\\\"card-title mb-0 text-heading fs-22 lh-15\\\">Add new property</h3> -->\\n                <!-- <p class=\\\"card-text\\\">You can update details</p> -->\\n               <form *ngIf=\\\"!isSuccessful\\\" name=\\\"form\\\" (ngSubmit)=\\\"nf.form.valid && onSubmit()\\\" #nf=\\\"ngForm\\\">\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4\\\">\\n                        <label for=\\\"name\\\" class=\\\"text-heading\\\">Property name*</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\" required #nam=\\\"ngModel\\\" name=\\\"nam\\\" \\n                        [(ngModel)]=\\\"rentallisting.name\\\"    minlength=\\\"3\\\" maxlength=\\\"30\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"nam.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"nam.errors['required']\\\">Property Name is required</div>\\n                            <div *ngIf=\\\"nam.errors['minlength']\\\">\\n                                Property must be at least 3 characters\\n                            </div>\\n                            <div *ngIf=\\\"nam.errors['maxlength']\\\">\\n                                Property must be at most 20 characters\\n                            </div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4\\\">\\n                        <label for=\\\"accomtype\\\" class=\\\"text-heading\\\">Accomedation Type*</label>\\n                        <!-- <select class=\\\"form-select\\\" aria-label=\\\"Default select example\\\" required #accomtype=\\\"ngModel\\\" id=\\\"accomtype\\\" name=\\\"accomtype\\\"\\n                                [(ngModel)]=\\\"accomdationtype\\\" onchange=\\\"if (this.selectedIndex==1){this.form['numdays'].style.visibility='visible'}else {this.form['numdays'].style.visibility='hidden'};\\\"> -->\\n                        <select class=\\\"form-select\\\" aria-label=\\\"Default select example\\\" required #accomtype=\\\"ngModel\\\" id=\\\"accomtype\\\" name=\\\"accomtype\\\"\\n                                [(ngModel)]=\\\"rentallisting.accomedation_type\\\" >\\n                            <option value=\\\"\\\" disabled selected>Select</option>\\n                            <option value=\\\"Temporary\\\">Temporary</option>\\n                            <option value=\\\"Permanent\\\">Permanent</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4\\\">\\n                        <label for=\\\"numppl\\\" class=\\\"text-heading\\\">Num people Currently living?*</label>\\n                        <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\" id=\\\"numppl\\\" name=\\\"numppl\\\"\\n                        [(ngModel)]=\\\"rentallisting.num_people_living\\\" min=\\\"0\\\"  #numppl=\\\"ngModel\\\" required (keydown)=\\\"restrictNegativeValues($event)\\\" maxlength=\\\"10\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"numppl?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"numppl?.errors['required']\\\">Number People Currently living is required</div>\\n                            <div *ngIf=\\\"numppl?.errors['maxlength']\\\">Number People Currently living is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4\\\">\\n                        <label for=\\\"numppln\\\" class=\\\"text-heading\\\">Num people can accommodate?*</label>\\n                        <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\" id=\\\"numppln\\\" name=\\\"numppln\\\"\\n                        [(ngModel)]=\\\"rentallisting.num_people\\\"  min=\\\"0\\\" #numppln=\\\"ngModel\\\" required (keydown)=\\\"restrictNegativeValues($event)\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"numppln?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"numppln?.errors['required']\\\">Number People needs accomdation is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4\\\">\\n                        <label for=\\\"mobile\\\" class=\\\"text-heading\\\">Num of Bedrooms?*</label>\\n                        <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\" id=\\\"numRooms\\\" name=\\\"numRom\\\"\\n                        [(ngModel)]=\\\"rentallisting.num_bedrooms\\\" min=\\\"0\\\"  #numRom=\\\"ngModel\\\" required (keydown)=\\\"restrictNegativeValues($event)\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"numRom?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"numRom?.errors['required']\\\">Number of bedrooms is required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\" >\\n                        <label for=\\\"email\\\" class=\\\"text-heading\\\">Num of days?*</label>\\n                        <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\" name=\\\"numdays\\\" \\n                        [(ngModel)]=\\\"rentallisting.num_days\\\" min=\\\"0\\\"  #numdays=\\\"ngModel\\\" required (keydown)=\\\"restrictNegativeValues($event)\\\">\\n                        <!-- <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\" name=\\\"numdays\\\" \\n                        [(ngModel)]=\\\"numDays\\\"   #numdays=\\\"ngModel\\\" style=\\\"visibility:hidden;\\\"> -->\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"numdays?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"numdays?.errors['required']\\\">Number days is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4\\\">\\n                        <label for=\\\"mobile\\\" class=\\\"text-heading\\\">Num Of baths?*</label>\\n                        <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\" id=\\\"numbat\\\" name=\\\"numbat\\\"\\n                        [(ngModel)]=\\\"rentallisting.num_bathrooms\\\"  min=\\\"0\\\" #numbat=\\\"ngModel\\\" required (keydown)=\\\"restrictNegativeValues($event)\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"numbat?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"numbat?.errors['required']\\\">Number baths is required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"accomStart\\\" class=\\\"text-heading\\\">Accomedated start date?*</label>\\n                        <input type=\\\"date\\\" class=\\\"form-control form-control-md\\\"  name=\\\"accstar\\\"\\n                        [(ngModel)]=\\\"rentallisting.available_date\\\"   #accstar=\\\"ngModel\\\" required min=\\\"{{getCurrentDate()}}\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"accstar?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"accstar?.errors['required']\\\">Accomedated start date is required</div>\\n                            <div *ngIf=\\\"nf.submitted && accstar?.errors?.min\\\">Accommodated start date must be today or later.</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"appRent\\\" class=\\\"text-heading\\\">Approx rent/Month ?*</label>\\n                        <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\"  name=\\\"appren\\\"\\n                        [(ngModel)]=\\\"rentallisting.approx_rent\\\" min=\\\"0\\\" #appren=\\\"ngModel\\\" required (keydown)=\\\"restrictNegativeValues($event)\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"appren?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"appren?.errors['required']\\\">Approx rent is required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"parkingAvail\\\" class=\\\"text-heading\\\">Parking available ?*</label>\\n                        <select class=\\\"form-select\\\" aria-label=\\\"Default select example\\\"\\n                        #parki=\\\"ngModel\\\" id=\\\"parki\\\" name=\\\"parki\\\" [(ngModel)]=\\\"rentallisting.parking_available\\\" >\\n                            <option value=\\\"\\\" disabled selected>Select</option>\\n                            <option value=\\\"true\\\">Yes</option>\\n                            <option value=\\\"false\\\">No</option>\\n                        </select>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4 \\\">\\n                        <label for=\\\"petFriendly\\\" class=\\\"text-heading\\\">Pets friendly ?*</label>\\n                        <select class=\\\"form-select\\\" aria-label=\\\"Default select example\\\" \\n                        #pet=\\\"ngModel\\\" id=\\\"pet\\\" name=\\\"pet\\\" [(ngModel)]=\\\"rentallisting.is_pet_friendly\\\" >\\n                            <option value=\\\"\\\" disabled selected>Select</option>\\n                            <option value=\\\"true\\\">Yes</option>\\n                            <option value=\\\"false\\\">No</option>\\n                        </select>\\n                    </div>\\n                </div>\\n                \\n            \\n                <hr>\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"Address\\\" class=\\\"text-heading\\\">Address*</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\" id=\\\"address\\\" name=\\\"addre\\\"\\n                        [(ngModel)]=\\\"rentallisting.address1\\\"  #addre=\\\"ngModel\\\" required>\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"addre?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"addre?.errors['required']\\\">Address is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"City\\\" class=\\\"text-heading\\\">City*</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\" name=\\\"cit\\\"\\n                        [(ngModel)]=\\\"rentallisting.city\\\"  #cit=\\\"ngModel\\\" required>\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"cit?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"cit?.errors['required']\\\">City is required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"State\\\" class=\\\"text-heading\\\">State*</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\" name=\\\"stat\\\"\\n                        [(ngModel)]=\\\"rentallisting.state\\\"  #stat=\\\"ngModel\\\" required>\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"stat?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"stat?.errors['required']\\\">State is required</div>\\n                        </div>\\n                    </div>\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"Country\\\" class=\\\"text-heading\\\">Country*</label>\\n                        <input type=\\\"text\\\" class=\\\"form-control form-control-md\\\"  name=\\\"countr\\\"\\n                        [(ngModel)]=\\\"rentallisting.country\\\"  #countr=\\\"ngModel\\\" required>\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"countr?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"countr?.errors['required']\\\">Country is required</div>\\n                        </div>\\n                    </div>\\n                </div>\\n\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-6 px-4 mb-md-0\\\">\\n                        <label for=\\\"zipCode\\\" class=\\\"text-heading\\\">Zip Code*</label>\\n                        <input type=\\\"number\\\" class=\\\"form-control form-control-md\\\"  name=\\\"zipcod\\\"\\n                        [(ngModel)]=\\\"rentallisting.zipcode\\\"  #zipcod=\\\"ngModel\\\" required (keydown)=\\\"restrictNegativeValues($event)\\\">\\n                        <div class=\\\"alert-danger\\\" *ngIf=\\\"zipcod?.errors && nf.submitted\\\">\\n                            <div *ngIf=\\\"zipcod?.errors['required']\\\">ZipCode is required</div>\\n                        </div>\\n                    </div>\\n                    \\n                </div>\\n\\n                <div class=\\\"form-row mx-n4\\\">\\n                    <div class=\\\"form-group col-md-12 px-4 mb-md-0\\\">\\n                        <label for=\\\"des\\\" class=\\\"text-heading\\\">Description</label>\\n                        <textarea id=\\\"description\\\"  class=\\\"form-control form-control-md\\\" \\n                        name=\\\"description\\\" [(ngModel)]=\\\"rentallisting.description\\\" rows=\\\"4\\\" cols=\\\"60\\\"></textarea>\\n                   </div>\\n                </div>  <br>      \\n                <div class=\\\"d-flex justify-content-end flex-wrap\\\">\\n                    <button class=\\\"btn btn-primary mr-0\\\" >Submit</button>\\n                 </div>\\n              </form>\\n            </div>\\n            \\n        </div>\\n    </sb-card>\\n</sb-layout-dashboard>\";","import { UpdnewpropertyComponent } from './updnewproperty/updnewproperty.component';\n\nexport const containers = [UpdnewpropertyComponent];\n\nexport * from './updnewproperty/updnewproperty.component';\n"]}